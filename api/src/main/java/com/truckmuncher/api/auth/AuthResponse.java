// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Volumes/home/projects/TruckMuncher-Protos/com/truckmuncher/api/auth.proto
package com.truckmuncher.api.auth;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * The full user model plus a session token.
 */
public final class AuthResponse extends Message {

    public static final String DEFAULT_USERID = "";
    public static final String DEFAULT_USERNAME = "";
    public static final String DEFAULT_SESSIONTOKEN = "";

    /**
     * Uniquely identifies the logged in user.
     */
    @ProtoField(tag = 1, type = STRING, label = REQUIRED)
    public final String userId;

    /**
     * The Twitter or Facebook username.
     */
    @ProtoField(tag = 2, type = STRING, label = REQUIRED)
    public final String username;

    /**
     * The session token used on all further requests.
     */
    @ProtoField(tag = 3, type = STRING, label = REQUIRED)
    public final String sessionToken;

    public AuthResponse(String userId, String username, String sessionToken) {
        this.userId = userId;
        this.username = username;
        this.sessionToken = sessionToken;
    }

    private AuthResponse(Builder builder) {
        this(builder.userId, builder.username, builder.sessionToken);
        setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof AuthResponse)) return false;
        AuthResponse o = (AuthResponse) other;
        return equals(userId, o.userId)
                && equals(username, o.username)
                && equals(sessionToken, o.sessionToken);
    }

    @Override
    public int hashCode() {
        int result = hashCode;
        if (result == 0) {
            result = userId != null ? userId.hashCode() : 0;
            result = result * 37 + (username != null ? username.hashCode() : 0);
            result = result * 37 + (sessionToken != null ? sessionToken.hashCode() : 0);
            hashCode = result;
        }
        return result;
    }

    public static final class Builder extends Message.Builder<AuthResponse> {

        public String userId;
        public String username;
        public String sessionToken;

        public Builder() {
        }

        public Builder(AuthResponse message) {
            super(message);
            if (message == null) return;
            this.userId = message.userId;
            this.username = message.username;
            this.sessionToken = message.sessionToken;
        }

        /**
         * Uniquely identifies the logged in user.
         */
        public Builder userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * The Twitter or Facebook username.
         */
        public Builder username(String username) {
            this.username = username;
            return this;
        }

        /**
         * The session token used on all further requests.
         */
        public Builder sessionToken(String sessionToken) {
            this.sessionToken = sessionToken;
            return this;
        }

        @Override
        public AuthResponse build() {
            checkRequiredFields();
            return new AuthResponse(this);
        }
    }
}
