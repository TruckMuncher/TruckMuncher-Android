// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Volumes/home/Dropbox/workspace/TruckMuncher-Protos/com/truckmuncher/api/trucks.proto
package com.truckmuncher.api.trucks;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * The included truck will always have a valid id.
 */
public final class TruckForVendorResponse extends Message {

    public static final Boolean DEFAULT_ISNEW = true;

    @ProtoField(tag = 1, label = REQUIRED)
    public final Truck truck;

    /**
     * If true, then a new Truck was created during this request. On native apps, this will need to be handled.
     * if false, the truck previously existed.
     */
    @ProtoField(tag = 2, type = BOOL, label = REQUIRED)
    public final Boolean isNew;

    public TruckForVendorResponse(Truck truck, Boolean isNew) {
        this.truck = truck;
        this.isNew = isNew;
    }

    private TruckForVendorResponse(Builder builder) {
        this(builder.truck, builder.isNew);
        setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof TruckForVendorResponse)) return false;
        TruckForVendorResponse o = (TruckForVendorResponse) other;
        return equals(truck, o.truck)
                && equals(isNew, o.isNew);
    }

    @Override
    public int hashCode() {
        int result = hashCode;
        if (result == 0) {
            result = truck != null ? truck.hashCode() : 0;
            result = result * 37 + (isNew != null ? isNew.hashCode() : 0);
            hashCode = result;
        }
        return result;
    }

    public static final class Builder extends Message.Builder<TruckForVendorResponse> {

        public Truck truck;
        public Boolean isNew;

        public Builder() {
        }

        public Builder(TruckForVendorResponse message) {
            super(message);
            if (message == null) return;
            this.truck = message.truck;
            this.isNew = message.isNew;
        }

        public Builder truck(Truck truck) {
            this.truck = truck;
            return this;
        }

        /**
         * If true, then a new Truck was created during this request. On native apps, this will need to be handled.
         * if false, the truck previously existed.
         */
        public Builder isNew(Boolean isNew) {
            this.isNew = isNew;
            return this;
        }

        @Override
        public TruckForVendorResponse build() {
            checkRequiredFields();
            return new TruckForVendorResponse(this);
        }
    }
}
